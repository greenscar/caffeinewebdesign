/*
 * ____________________________________________________
 * 
 * Copyright (c) 2001, CoveComm Inc.                         
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 *
 * Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer.
 *
 * Redistributions in binary form must reproduce the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer in the documentation and/or other 
 * materials provided with the distribution.
 *
 * Neither the name of CoveComm Inc. nor the names of 
 * contributors may be used to endorse or promote products 
 * derived from this software without specific prior 
 * written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS 
 * AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR 
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY 
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ____________________________________________________
 *
 * This class is part of the DEWEB package for 
 * database-enabled web development. For more information
 * on DEWEB see http://www.covecomm.com/java
 *
 */
 
package com.covecomm.deweb.util;

import org.apache.tomcat.core.*;
import java.io.*;
import java.sql.*;
import org.apache.tomcat.request.*;

/** A request intercept that logs all requests to the database */

public class LoggingInterceptor extends BaseInterceptor {

	public LoggingInterceptor() {
	}

	public void engineInit(ContextManager cm) throws TomcatException {
		super.engineInit(cm);
		System.out.println("driverName " + driverName);
		try {
			Class.forName(driverName);
			connection = 
				DriverManager.getConnection(connectionURL, connectionName, connectionPassword); 
			System.out.println("created connection " + connection);
		} catch (ClassNotFoundException ex) {
			throw new RuntimeException("Logger can't find database driver");
		} catch (SQLException ex) {
			throw new RuntimeException("Logger: SQL Exception " + ex);
		} catch (Exception e) {
			System.out.println("Logger: unexpected exception " + e);
		}
	}

	public int requestMap(Request request) {
		Context context = request.getContext();
		String pathInfo = request.getServletPath();
		if (pathInfo == null)
			pathInfo = "";
		String absPath = null;
		long size = 0;
		int status = 0;
		absPath = context.getRealPath(pathInfo);
		if (absPath != null) {
			File file = new File(absPath);
			if (file.exists())
				size = file.length();
			else
				status = 404;
		}
		logRequest(request, status, size);
		return 0;
	}

	/**
	 * The connection to the database.
	 */
	private Connection connection = null;
	/**
	* The connection URL to use when trying to connect to the databse
	*/
	private String connectionName = null;
	/**
	* The connection URL to use when trying to connect to the databse
	*/
	private String connectionPassword = null;
	/**
	* The connection URL to use when trying to connect to the databse
	*/
	private String connectionURL = null;
	private boolean dbInitialized = false;
	/**
	* A decoder for any associated authorization header
	*/
	private sun.misc.BASE64Decoder decoder; /**
	* The JDBC driver to use.
	*/
	private String driverName = null;
	/**
	* The log table column for the file size
	*/
	private String logColFileSize = null;
	/**
	* The log table column for IP address
	*/
	private String logColIP = null; /**
	* The log table column for Request
	*/
	private String logColRequest = null;
	/**
	* The log table column for the status code
	*/
	private String logColStatus = null;
	/**
	* The log table column for user name
	*/
	private String logColUserName = null;
	/**
	* The table that holds log data.
	*/
	private String logTable = null;
	private PreparedStatement preparedStmt = null;
	/**
	* Log a request to the database
	*/
	public synchronized void logRequest(Request request, int status, long bytes) {
		try {
			if ((connection == null) || connection.isClosed()) {
				System.out.println("Connection is closed");
				connection = DriverManager.getConnection(connectionURL, connectionName, connectionPassword);
				if ((connection == null) || connection.isClosed()) {
					System.out.println("Unable to reopen the connection");
					return;
				}
			}

			if (preparedStmt == null) {
				String sql = 
					"INSERT INTO "
						+ logTable
						+ " ("
						+ logColIP
						+ ","
						+ logColUserName
						+ ","
						+ logColRequest
						+ ","
						+ logColStatus
						+ ","
						+ logColFileSize
						+ ") VALUES (?,?,?,?,?)"; 
				System.out.println("Prepared statement: " + sql);
				preparedStmt = connection.prepareStatement(sql);
			}
			preparedStmt.setString(1, request.getRemoteAddr());
			preparedStmt.setString(2, ""); //request.getRemoteUser());
			preparedStmt.setString(3, request.getRequestURI());
			preparedStmt.setInt(4, status);
			preparedStmt.setLong(5, bytes);
			preparedStmt.executeQuery();
			return;
		} catch (SQLException ex) {

			System.out.println("Error adding log record: " + ex);

			if (preparedStmt != null) {
				try {
					preparedStmt.close();
				} catch (Exception e) {
				}
				preparedStmt = null;
			}
			if (connection != null) {
				try {
					connection.close();
				} catch (Exception e) {
				}
				connection = null;
			}

		}
		return;
	}


	public void setConnectionName(String connectionName) {
		this.connectionName = connectionName;
	} 
	public void setConnectionPassword(String connectionPassword) {
		this.connectionPassword = connectionPassword;
	} 
	public void setConnectionURL(String connectionURL) {
		this.connectionURL = connectionURL;
	} 

	public void setDriverName(String driverName) {
		this.driverName = driverName;
	}
	
	public void setLogColFileSize(java.lang.String newLogColFileSize) {
		logColFileSize = newLogColFileSize;
	}
	public void setLogColIP(java.lang.String newLogColIP) {
		logColIP = newLogColIP;
	}
	public void setLogColRequest(java.lang.String newLogColRequest) {
		logColRequest = newLogColRequest;
	}
	public void setLogColStatus(java.lang.String newLogColStatus) {
		logColStatus = newLogColStatus;
	}
	public void setLogColUserName(java.lang.String newLogColUserName) {
		logColUserName = newLogColUserName;
	}
	public void setLogTable(java.lang.String newLogTable) {
		logTable = newLogTable;
	}
}