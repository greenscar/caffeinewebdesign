/*
 * SAXEcho.java
 */
import java.io.*;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
/**
 * Extending DefaultHandler implements the ContentHandler interface.
 * This gives us the Event Handlers. The event handling methods are: 
 *    startDocument, endDocument, startElement, endElement, and characters
 * Each of these methods is required by the interface to throw a SAXException
 */
public class SAXEcho extends DefaultHandler{
    public static void main(String[] argv) {
        if (argv.length != 1) {
            // Process the command line argument,
            System.err.println("Usage: cmd filename");
            System.exit(1);
        }
        // Use an instance of ourselves as the SAX event handler
        DefaultHandler me = new SAXEcho();
        // Create a SAXParserFactory instance.
        // Use the default (non-validating) parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
        // The ContentHandler methods throw SAXExceptions 
        // IOExceptions can occur while writing
        try {
            // Get the name of the file to echo & set up output stream
            out = new OutputStreamWriter(System.out, "UTF8");
            /*
             * Parse the input
             */
            // Get a parser from the factory 
            SAXParser saxParser = factory.newSAXParser();
            // Give the parser an instance of this class to handle the 
            //    parsing events, telling it which input file to process.
            saxParser.parse( new File(argv[0]), me);
            /*
             * END Parse the input
             */
        } catch (SAXParseException spe) {
            // Error generated by the parser (in the XML code)
            System.out.println("\n** Parsing error" 
            + ", line " + spe.getLineNumber()
            + ", uri " + spe.getSystemId());
            System.out.println("   " + spe.getMessage() );
            // Unpack the delivered exception to get the exception it contains
            Exception  x = spe;
            if (spe.getException() != null)
                x = spe.getException();
            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated by this application's event handling
            // (or a parser-initialization error)
            Exception  x = sxe;
            if (sxe.getException() != null)
            x = sxe.getException();
            x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            //SAXParserFactory class could throw an exception if it were for unable to create a parser
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
        System.exit(0);
    }
    static private Writer out;
    private String indentString = "    "; // Amount to indent
    private int indentLevel = 0;


    /*
     * Process the ContentHandler Events
     */
    // Get the document locator and use it to echo the document's system ID
    public void setDocumentLocator(Locator l){
        try {
          out.write("LOCATOR");
          out.write("\n SYS ID: " + l.getSystemId() );
          out.flush();
        } catch (IOException e) {
            // Ignore errors
        }
    }
    //Echo an XML declaration when the parser encounters the start of the document
    public void startDocument() throws SAXException{
        nl();
        nl();
        emit("START DOCUMENT");
        nl();
        emit("<?xml version='1.0' encoding='UTF-8'?>");
    }
    //At the end of the document, you simply put out a final newline 
    //  and flush the output stream
    public void endDocument() throws SAXException{
        try {
            nl(); emit("END DOCUMENT");
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }
    public void startElement(String namespaceURI,
                             String sName, // simple name (localName)
                             String qName, // qualified name
                             Attributes attrs) throws SAXException{
        nl(); emit("ELEMENT: ");
        indentLevel ++;
        String eName = sName; // element name
        if ("".equals(eName)) eName = qName; // namespaceAware = false
        emit("<"+eName);
        if (attrs != null) {
            for (int i = 0; i < attrs.getLength(); i++) {
                nl();
                emit("   ATTR: ");
                emit(attrs.getQName(i));
                //emit(attrs.getLocalName(i));
                emit("\t\"");
                emit(attrs.getValue(i));
                emit("\"");
            }
        }
        if (attrs.getLength() > 0) nl();
        emit(">");
    }
    public void endElement(String namespaceURI,
                           String sName, // simple name
                           String qName  // qualified name
                          ) throws SAXException{
        nl();
        emit("END_ELM: ");
        emit("</"+sName+">");
        indentLevel --;
    }     
    //Echo the characters the parser sees:
    public void characters(char buf[], int offset, int len)throws SAXException{
        
        nl(); emit("CHARS:   ");     
        String s = new String(buf, offset, len);
        if(!s.trim().equals("")) emit(s);
    }
    public void processingInstruction(String target, String data) 
        throws SAXException{
            nl(); 
            emit("PROCESS: ");
            emit("<?"+target+" "+data+"?>");
    }
    /*
     * END Process the ContentHandler Events
     */    

    // Treat validation errors as fatal
    public void error(SAXParseException e) throws SAXParseException{
        throw e;
    }
    
    // By default, warnings won't be displayed.
    // This will display warnings.
    public void warning(SAXParseException err) throws SAXParseException{
        System.out.println("** Warning"
        + ", line " + err.getLineNumber()
        + ", uri " + err.getSystemId());
        System.out.println("   " + err.getMessage());
    }

    //Do output in a method that takes care of the exception-handling details
    private void emit(String s) throws SAXException{
        try {
            out.write(s);
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }
    //Write the kind of line-ending character used by the current system
    private void nl() throws SAXException{
        String lineEnd =  System.getProperty("line.separator");
        try {
            out.write(lineEnd);
            for (int i=0; i < indentLevel; i++) out.write(indentString);
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }
}
